import { useEffect, useState } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  Pagination,
  TextField,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
  Stack,
  InputAdornment
} from "@mui/material";
import ClearIcon from '@mui/icons-material/Clear';
import ContentCopyIcon from '@mui/icons-material/ContentCopy';
import IconButton from '@mui/material/IconButton';
import Tooltip from '@mui/material/Tooltip';

import type { 
  ReservationType,
  SortByType,
  SortOrderType,
  LimitType
} from '../types/ReservationTypes';


const ReservationTable = () => {
    const [reservations, setReservations] = useState<ReservationType[]>([]);
    const [page, setPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const [limit, setLimit] = useState<LimitType>(10);
    const [sortBy, setSortBy] = useState<SortByType>('');
    const [sortOrder, setSortOrder] = useState<SortOrderType>('asc');
    const [filterTerm, setFilterTerm] = useState('');
    const [debouncedFilterTerm, setDebouncedFilterTerm] = useState(filterTerm);

    const fetchData = async () => {
      const params = new URLSearchParams({
        page: page.toString(),
        limit: limit.toString(),
        sort: sortBy,
        order: sortOrder,
        filter: debouncedFilterTerm,
      });
    
      const response = await fetch(`/api/products?${params.toString()}`);
      if (!response.ok) throw new Error('Failed to fetch reservations');
      const res = await response.json();
      setReservations(res.data);
      setTotalPages(res.pages);
    };

    useEffect(() => {
      const handler = setTimeout(() => {
        setDebouncedFilterTerm(filterTerm);
      }, 500);
    
      return () => {
        clearTimeout(handler);
      };
    }, [filterTerm]);

    useEffect(() => {
      fetchData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [page, limit, sortBy, sortOrder, debouncedFilterTerm]);
    
  return (
    <>
      <FormStack
      filterTerm={filterTerm}
      setFilterTerm={setFilterTerm}
      sortBy={sortBy}
      setSortBy={setSortBy}
      sortOrder={sortOrder}
      setSortOrder={setSortOrder}
      limit={limit}
      setLimit={setLimit}
      setPage={setPage}
      />

      <Typography variant="h6" sx={{ m: 2 }} style={{fontSize: '1.5rem' }}>Reservations</Typography>

      <TableContainer component={Paper} style={{ borderTopLeftRadius: '8px', borderTopRightRadius: '8px', overflowY: 'scroll', height: '67.5vh' }}>

        {reservations.map((res) => (
          <Table key={res.reservation_uuid}>

            {/* Reservation summary */}
            <TableHead>
              <TableRow>
                <TableCell>Reservation UUID</TableCell>
                <TableCell>Number of Active Purchases</TableCell>
                <TableCell>Sum of Active Charges</TableCell>
              </TableRow>
            </TableHead>

            <TableBody>
              <TableRow>
                <TableCell>{res.reservation_uuid}</TableCell>
                <TableCell>{res.number_of_active_purchases}</TableCell>
                <TableCell>{Math.floor(res.sum_of_active_charges)}</TableCell>
              </TableRow>

              <TableRow>
                <TableCell colSpan={3} sx={{ fontWeight: 'bold', pt: 3, backgroundColor: 'gray' }}>
                  Reservation Products
                </TableCell>
              </TableRow>

              {/* Products rows */}
              {res.products.map((p, idx) => (
                <TableRow
                  key={idx}
                  className={p.status ? 'active' : 'cancelled'}
                >
                  <TableCell>
                    {p.name}
                    <Tooltip title="Copy to clipboard">
                      <IconButton
                        size="small"
                        onClick={() => navigator.clipboard.writeText(p.name)}
                        sx={{
                          width: 24,
                          height: 24,
                          // padding: 0.5,
                          opacity: 0.8,
                          ml: 0.5,
                        }}
                      >
                        <ContentCopyIcon fontSize="small" sx={{ fontSize: 16 }} />
                      </IconButton>
                    </Tooltip>
                  </TableCell>
                  <TableCell>{p.status ? 'active' : 'cancelled'}</TableCell>
                  <TableCell>{Math.floor(p.charge)}</TableCell>
                </TableRow>
              ))}
            </TableBody>

          </Table>
        ))}
      </TableContainer>
        <Pagination
          count={totalPages}
          page={page}
          onChange={(_, value) => setPage(value)}
          color="primary"
          sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}
        />
    </>
  )
}

export default ReservationTable;


interface FormStackProps {
  filterTerm: string;
  setFilterTerm: (f: string) => void;
  sortBy: SortByType;
  setSortBy: (s: SortByType) => void;
  sortOrder: SortOrderType;
  setSortOrder: (o: SortOrderType) => void;
  limit: LimitType;
  setLimit: (l: LimitType) => void;
  setPage: (p: number) => void;
}

const FormStack = ({
  filterTerm,
  setFilterTerm,
  sortBy,
  setSortBy,
  sortOrder,
  setSortOrder,
  limit,
  setLimit,
  setPage
}: FormStackProps) => {
  return (
    <Stack direction="row" spacing={3} sx={{ mb: 2 }}>
    <TextField
      label="Search Products"
      variant="outlined"
      size="small"
      value={filterTerm}
      onChange={(e) => {
        setPage(1); // Reset to first page on search
        setFilterTerm(e.target.value);
      }}
      sx={{ minWidth: 300 }}
      slotProps={{
        input: {
          endAdornment: filterTerm && (
            <InputAdornment position="end">
              <IconButton
                size="small"
                onClick={() => setFilterTerm('')}
                edge="end"
              >
                <ClearIcon fontSize="small" />
              </IconButton>
            </InputAdornment>
          ),
        }
      }}
      />

    <FormControl size="small" sx={{ minWidth: 200 }}>
      <InputLabel>Sort By</InputLabel>
      <Select
        value={sortBy}
        label="Sort By"
        onChange={(e) => setSortBy(e.target.value as SortByType)}
        sx={{ minWidth: 200 }}
        >
        <MenuItem value="">All Products</MenuItem>
        <MenuItem value="reservation_uuid">Reservation UUID</MenuItem>
        <MenuItem value="number_of_active_purchases"># Purchases</MenuItem>
        <MenuItem value="sum_of_active_charges">Sum of Charges</MenuItem>
      </Select>
    </FormControl>

    <FormControl size="small" sx={{ minWidth: 120 }}>
      <InputLabel>Order</InputLabel>
      <Select
        value={sortOrder}
        label="Order"
        onChange={(e) => setSortOrder(e.target.value as SortOrderType)}
        >
        <MenuItem value="asc">Ascending</MenuItem>
        <MenuItem value="desc">Descending</MenuItem>
      </Select>
    </FormControl>

    <FormControl size="small" sx={{ minWidth: 120 }}>
      <InputLabel>Limit</InputLabel>
      <Select
        value={limit}
        label="Limit"
        onChange={(e) => setLimit(e.target.value as LimitType)}
        >
        <MenuItem value={10}>10</MenuItem>
        <MenuItem value={20}>20</MenuItem>
        <MenuItem value={50}>50</MenuItem>
      </Select>
    </FormControl>

  </Stack>
  )
}